pipeline {
    agent any 
    tools {
        terraform 'Terraform-1.4.2'
    }
    stages {
        stage('Run CI?') {
          steps {
            script {
              sh 'git log -1'
              if (sh(script: "git log -1 | grep '.*\\[ci skip\\].*'", returnStatus: true) == 0) {
                currentBuild.result = 'NOT_BUILT'
                error "'[ci skip]' found in git commit message. Aborting..."
              }
            }
          }
        } 
        stage('---Test---') {
            steps {
                sh 'grep -i "master" index.html'
            }
        }
        stage('---Building and Pushing Image---') {
            environment {
                USERNAME = credentials('DOCKER_REGISTRY_USERNAME')
                PASSWORD = credentials('DOCKER_REGISTRY_PASSWORD')
            }          
            steps {
                sh '''docker build -t nithinpj09/website:1.0 .
                    echo $PASSWORD | docker login -u $USERNAME --password-stdin
                    docker push nithinpj09/website:1.0'''
            }
        }
        stage('---Infrastructure Provisioning---') { 
            environment {
                AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
                AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
            }
            steps {
                sh '''terraform init
                    terraform apply -auto-approve
                    chmod 600 private.pem'''
                script {
                    def IP = sh(script: "terraform output public_ip", returnStdout: true).trim()
                    env.PUBLIC_IP = IP.replaceAll('"','')
                }
            }
        }        
        stage('---Installation---') {
            steps {
                sh '''ssh -i private.pem -o StrictHostKeyChecking=accept-new -T ubuntu@$PUBLIC_IP <<EOF
                    whoami
                    sudo apt update
                    sudo snap install docker
                    exit
                    EOF'''
            }
        }  
        stage('---Configuration---') {
            steps {
                sh '''ssh -i private.pem -o StrictHostKeyChecking=accept-new -T ubuntu@$PUBLIC_IP <<EOF
                    sudo groupadd docker
                    sudo usermod -aG docker ubuntu
                    newgrp docker
                    sudo chown root:docker /var/run/docker.sock
                    exit
                    exit
                    EOF'''
            }
        }
        stage('---Deployment---') {
            steps {
                sh '''ssh -i private.pem -o StrictHostKeyChecking=accept-new -T ubuntu@$PUBLIC_IP <<EOF
                    if docker ps | grep -q 'myApp'
                    then 
                        echo "Stopping and removing the container."
                        docker stop myApp
                        docker rm myApp                      
                    fi
                    docker run -d --restart always -p 80:80 --name myApp nithinpj09/website:1.0
                    exit
                    EOF'''
            }
        } 
    }
}
